"use strict";var ApplicationConfiguration=function(){var applicationModuleName="freelancemanager",applicationModuleVendorDependencies=["ngResource","ngAnimate","ui.router","ui.bootstrap","ui.utils"],registerModule=function(moduleName){angular.module(moduleName,[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider",function($locationProvider){$locationProvider.hashPrefix("!")}]),angular.element(document).ready(function(){angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("account"),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("crm"),ApplicationConfiguration.registerModule("project"),ApplicationConfiguration.registerModule("time"),angular.module("account",["angular-jwt"]).factory("authInterceptor",["$rootScope","$q","$window",function($rootScope,$q,$window){return{request:function(config){return config.headers=config.headers||{},$window.sessionStorage.token&&(config.headers.Authorization="Bearer "+$window.sessionStorage.token),config},response:function(response){return 401===response.status,response||$q.when(response)}}}]).config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push("authInterceptor")}]).run(["$rootScope","$location","$window","jwtHelper",function($rootScope,$location,$window,jwtHelper){$rootScope.$on("$stateChangeStart",function(event,nextRoute){var loggedIn=$window.sessionStorage.token&&!jwtHelper.isTokenExpired($window.sessionStorage.token);nextRoute.access.requiredLogin&&!loggedIn&&$location.path("/login")})}]),angular.module("account").config(["$stateProvider",function($stateProvider){$stateProvider.state("login",{url:"/login",templateUrl:"modules/account/views/login.html"})}]),angular.module("account").controller("AuthenticateController",["$scope","$http","$window","$location",function($scope,$http,$window,$location){$scope.user={email:"",password:""},$scope.error="",$scope.submit=function(){$http.post("/security/authenticate",$scope.user).success(function(data){$window.sessionStorage.token=data.token,$location.path("/")}).error(function(){delete $window.sessionStorage.token,$scope.error="Invalid email or password"})}}]),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/views/home.html",access:{requiredLogin:!0}})}]),angular.module("core").controller("HeaderController",["$scope",function($scope){$scope.date=new Date}]),angular.module("core").directive("autofocus",["$timeout",function($timeout){return{link:function(scope,element){$timeout(function(){element[0].focus()},100)}}}]),angular.module("core").directive("fmClockpicker",function(){return{restrict:"A",link:function(scope,element){element.clockpicker()}}}),angular.module("core").factory("Company",["$resource",function($resource){return $resource("/api/public/companies/:id",{id:"@id"})}]),angular.module("core").factory("Project",["$resource",function($resource){return $resource("/api/public/projects/:id",{id:"@id"},{active:{method:"GET",url:"/api/public/projects/active",isArray:!0}})}]),angular.module("core").factory("TimeRegistration",["$resource",function($resource){return $resource("/api/public/timeregistrations/:id",{id:"@id"},{bydate:{method:"GET",url:"/api/public/timeregistrations/bydate/:date",params:{date:"@date"},isArray:!0}})}]),angular.module("core").filter("formattime",function(){return function(a){return("00"+a).slice(-2)}}),angular.module("core").filter("moment",function(){return function(date,format){return date.format(format)}}),angular.module("core").service("Menus",[function(){this.defaultRoles=["user"],this.menus={};var shouldRender=function(user){if(!user)return this.isPublic;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exists")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,isPublic,roles){return this.menus[menuId]={isPublic:isPublic||!1,roles:roles||this.defaultRoles,items:[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,menuItemTitle,menuItemURL,menuItemType,menuItemUIRoute,isPublic,roles){return this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:menuItemTitle,link:menuItemURL,menuItemType:menuItemType||"item",menuItemClass:menuItemType,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:isPublic||this.menus[menuId].isPublic,roles:roles||this.defaultRoles,items:[],shouldRender:shouldRender}),this.menus[menuId]},this.addSubMenuItem=function(menuId,rootMenuItemURL,menuItemTitle,menuItemURL,menuItemUIRoute,isPublic,roles){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===rootMenuItemURL&&this.menus[menuId].items[itemIndex].items.push({title:menuItemTitle,link:menuItemURL,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:isPublic||this.menus[menuId].isPublic,roles:roles||this.defaultRoles,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===menuItemURL&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].link===submenuItemURL&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar")}]),angular.module("crm").config(["$stateProvider",function($stateProvider){$stateProvider.state("crm",{templateUrl:"modules/crm/views/crm.html",access:{requiredLogin:!0}}).state("crm.companies",{url:"/companies",templateUrl:"modules/crm/views/companies.html",access:{requiredLogin:!0}})}]),angular.module("crm").controller("CompaniesController",["$scope","$modal","Company",function($scope,$modal,Company){$scope.getAllCompanies=function(){$scope.companies=Company.query()},$scope.openCompany=function(company){var createDialog=$modal.open({templateUrl:"/modules/crm/views/companydialog.html",controller:"CompanyDialogController",resolve:{toUpdate:function(){return company}}});createDialog.result.then(function(company){var c=_.find($scope.companies,{id:company.id});c?angular.copy(company,c):$scope.companies.push(company)})}}]),angular.module("crm").controller("CompanyDialogController",["$scope","Company","toUpdate",function($scope,Company,toUpdate){function showMessage(message){$scope.isBusy=!0,$scope.message=message}function hideMessage(){$scope.isBusy=!1,$scope.message=""}$scope.originalCompany=toUpdate,$scope.newCompany=void 0==toUpdate,toUpdate=toUpdate||{},$scope.company={name:toUpdate.name||""},$scope.isBusy=!1,$scope.message="",$scope.ok=function(){showMessage("Saving company...");var id=$scope.newCompany?{}:{id:$scope.originalCompany.id};Company.save(id,$scope.company,function(data){hideMessage(),$scope.$close(data)},function(){showMessage("An error occurred...")})},$scope.cancel=function(){$scope.$dismiss("cancel")}}]),angular.module("project").config(["$stateProvider",function($stateProvider){$stateProvider.state("project",{templateUrl:"modules/project/views/project.html",access:{requiredLogin:!0}}).state("project.projects",{url:"/projects",templateUrl:"modules/project/views/projects.html",access:{requiredLogin:!0}})}]),angular.module("project").controller("ProjectDialogController",["$scope","Project","Company","toUpdate",function($scope,Project,Company,toUpdate){function showMessage(message){$scope.isBusy=!0,$scope.message=message}function hideMessage(){$scope.isBusy=!1,$scope.message=""}$scope.originalProject=toUpdate,$scope.newProject=void 0==toUpdate,toUpdate=toUpdate||{},$scope.project={companyId:toUpdate.companyId||"",name:toUpdate.name||"",description:toUpdate.description||""},$scope.isBusy=!1,$scope.message="",$scope.companies=Company.query(),$scope.ok=function(){showMessage("Saving project...");var id=$scope.newProject?{}:{id:$scope.originalProject.id};Project.save(id,$scope.project,function(data){hideMessage(),$scope.$close(data)},function(){showMessage("An error occurred...")})},$scope.cancel=function(){$scope.$dismiss("cancel")}}]),angular.module("project").controller("ProjectsController",["$scope","$modal","Project",function($scope,$modal,Project){$scope.getAllProjects=function(){$scope.projects=Project.query()},$scope.openProject=function(project){var createDialog=$modal.open({templateUrl:"/modules/project/views/projectdialog.html",controller:"ProjectDialogController",resolve:{toUpdate:function(){return project}}});createDialog.result.then(function(project){var c=_.find($scope.projects,{id:project.id});c?angular.copy(project,c):$scope.projects.push(project)})}}]),angular.module("time").config(["$stateProvider","$urlRouterProvider",function($stateProvider){$stateProvider.state("time",{templateUrl:"modules/time/views/timeregistration.html",access:{requiredLogin:!0}}).state("time.timeregistrations",{url:"/time/:date",templateUrl:"modules/time/views/timeregistrations.html",access:{requiredLogin:!0}})}]),angular.module("time").controller("TimeRegistrationDialogController",["$scope","Project","TimeRegistration","toUpdate","date",function($scope,Project,TimeRegistration,toUpdate,date){function showMessage(message){$scope.isBusy=!0,$scope.message=message}function hideMessage(){$scope.isBusy=!1,$scope.message=""}function convertNumericTimeToDisplay(time){var hour=Math.floor(time/100),minutes=Math.floor(time-100*hour);return("00"+hour).slice(-2)+":"+("00"+minutes).slice(-2)}function convertDisplayTimeToNumeric(time){return parseInt(time.replace(":",""))}$scope.originalTimeRegistration=toUpdate,$scope.newTimeRegistration=void 0==toUpdate,toUpdate=toUpdate||{},$scope.timeRegistration={company:null,project:null,task:null,description:toUpdate.description||"",from:toUpdate.from?convertNumericTimeToDisplay(toUpdate.from.numeric):"",to:toUpdate.to?convertNumericTimeToDisplay(toUpdate.to.numeric):""},$scope.isBusy=!1,$scope.message="",$scope.projects=Project.active(function(){$scope.companies=_.map(_.groupBy($scope.projects,function(p){return p.companyId}),function(g){return{id:g[0].companyId,name:g[0].company.name,projects:g}}),$scope.timeRegistration.company=_.first(_.where($scope.companies,{id:toUpdate.companyId})),$scope.timeRegistration.project=_.first(_.where($scope.timeRegistration.company.projects,{id:toUpdate.projectId})),$scope.timeRegistration.task=_.first(_.where($scope.timeRegistration.project.tasks,{name:toUpdate.task}))}),$scope.ok=function(){showMessage("Saving time registration...");var id=$scope.newTimeRegistration?{}:{id:$scope.originalTimeRegistration.id};TimeRegistration.save(id,{companyId:$scope.timeRegistration.company.id,projectId:$scope.timeRegistration.project.id,task:$scope.timeRegistration.task.name,description:$scope.timeRegistration.description,date:date,from:convertDisplayTimeToNumeric($scope.timeRegistration.from),to:convertDisplayTimeToNumeric($scope.timeRegistration.to)},function(data){hideMessage(),$scope.$close(data)},function(){showMessage("An error occurred...")})},$scope.cancel=function(){$scope.$dismiss("cancel")}}]),angular.module("time").controller("TimeRegistrationsController",["$scope","$modal","$location","$stateParams","TimeRegistration",function($scope,$modal,$location,$stateParams,TimeRegistration){$scope.date=new moment($stateParams.date,"YYYYMMDD"),$scope.hasTimeRegistrations=!1,$scope.nextDate=function(){$location.path("/time/"+$scope.date.add("days",1).format("YYYYMMDD"))},$scope.previousDate=function(){$location.path("/time/"+$scope.date.subtract("days",1).format("YYYYMMDD"))},$scope.refresh=function(){$scope.timeRegistrations=TimeRegistration.bydate({date:$scope.date.format("YYYYMMDD")},function(){$scope.hasTimeRegistrations=$scope.timeRegistrations.length>0})},$scope.openTimeRegistration=function(timeRegistration){var createDialog=$modal.open({templateUrl:"/modules/time/views/timeregistrationdialog.html",controller:"TimeRegistrationDialogController",size:"lg",resolve:{toUpdate:function(){return timeRegistration},date:function(){return $scope.date.format("YYYYMMDD")}}});createDialog.result.then(function(timeRegistration){var c=_.find($scope.timeRegistrations,{id:timeRegistration.id});c?angular.copy(timeRegistration,c):$scope.timeRegistrations.push(timeRegistration),$scope.hasTimeRegistrations=$scope.timeRegistrations.length>0})}}]);