"use strict";var ApplicationConfiguration=function(){var applicationModuleName="freelancemanager",applicationModuleVendorDependencies=["ngResource","ngAnimate","ui.router","ui.bootstrap","ui.utils"],registerModule=function(moduleName){angular.module(moduleName,[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider",function($locationProvider){$locationProvider.hashPrefix("!")}]),angular.element(document).ready(function(){angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("account"),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("crm"),ApplicationConfiguration.registerModule("project"),ApplicationConfiguration.registerModule("time"),angular.module("account",["angular-jwt"]).factory("authInterceptor",["$rootScope","$q","$window",function($rootScope,$q,$window){return{request:function(config){return config.headers=config.headers||{},$window.sessionStorage.token&&(config.headers.Authorization="Bearer "+$window.sessionStorage.token),config},response:function(response){return 401===response.status,response||$q.when(response)}}}]).config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push("authInterceptor")}]).run(["$rootScope","$location","$window","jwtHelper",function($rootScope,$location,$window,jwtHelper){$rootScope.$on("$stateChangeStart",function(event,nextRoute){var loggedIn=$window.sessionStorage.token&&!jwtHelper.isTokenExpired($window.sessionStorage.token);nextRoute.access&&nextRoute.access.requiredLogin&&!loggedIn&&$location.path("/login")})}]),angular.module("account").config(["$stateProvider",function($stateProvider){$stateProvider.state("login",{url:"/login",templateUrl:"modules/account/views/login.html"}).state("account",{url:"/account",templateUrl:"modules/account/views/account.html",access:{requiredLogin:!0}})}]),angular.module("account").controller("AccountInfoController",["$scope","$window","jwtHelper","Account",function($scope,$window,jwtHelper,Account){var token=jwtHelper.decodeToken($window.sessionStorage.token);Account.get({id:token.id}).$promise.then(function(response){$scope.account=response}),$scope.save=function(){Account.save(token.id,$scope.account)}}]),angular.module("account").controller("AuthenticateController",["$scope","$http","$window","$location",function($scope,$http,$window,$location){$scope.user={email:"",password:""},$scope.error="",$scope.submit=function(){$http.post("/security/authenticate",$scope.user).success(function(data){$window.sessionStorage.token=data.token,$location.path("/")}).error(function(){delete $window.sessionStorage.token,$scope.error="Invalid email or password"})}}]),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/views/home.html",access:{requiredLogin:!0}})}]),angular.module("core").controller("HeaderController",["$scope","$window","jwtHelper",function($scope,$window,jwtHelper){$scope.date=new Date;var token=jwtHelper.decodeToken($window.sessionStorage.token);$scope.fullName=token.fullName}]),angular.module("core").controller("HomeController",["$scope",function($scope){$scope.date=new Date}]),angular.module("core").directive("fmActiveMenuItem",["$state","$stateParams","$interpolate",function($state){return{restrict:"A",controller:["$scope","$element","$attrs",function($scope,$element,$attrs){function update(){0==$state.$current.self.name.indexOf(state)?$element.addClass("active"):$element.removeClass("active")}var state;state=$attrs.fmActiveMenuItem||"",$scope.$on("$stateChangeSuccess",update)}]}}]),angular.module("core").directive("autofocus",["$timeout",function($timeout){return{link:function(scope,element){$timeout(function(){element[0].focus()},100)}}}]),angular.module("core").directive("fmClockpicker",function(){return{restrict:"A",link:function(scope,element){element.clockpicker()}}}),angular.module("core").directive("fmDatepicker",["$timeout",function(){return{restrict:"A",require:"?ngModel",scope:{fmDatepickerDatechanged:"&"},link:function(scope,element,attrs,ngModel){if(ngModel){var updateModel=function(dateTxt){scope.$apply(function(){ngModel.$setViewValue(dateTxt)})};ngModel.$render=function(){element.datepicker("setDate",ngModel.$viewValue||"")},element.datepicker({format:attrs.fmDatepickerFormat||"yyyy-mm-dd",autoclose:!0,orientation:"auto right",todayBtn:"linked"}).on("changeDate",function(date){var dateTxt=date.format(attrs.fmDatepickerFormat||"yyyy-mm-dd");scope.$root&&!scope.$root.$$phase&&(updateModel(dateTxt),scope.fmDatepickerDatechanged&&scope.$apply(function(){scope.fmDatepickerDatechanged({date:dateTxt})}))})}}}}]),angular.module("core").directive("piechart",function(){return{restrict:"E",link:function(scope,elem,attrs){var chart=null,options={series:{pie:{show:!0,radius:1,label:{show:!0,radius:2/3,formatter:function(label,series){return"<div style='font-size:8pt; text-align:center; padding:2px; color:white;'>"+label+"<br/>"+Math.round(series.percent)+"%</div>"},threshold:.1}}},legend:{show:!1}};scope.$watch(attrs.ngModel,function(v){chart?(chart.setData(v),chart.setupGrid(),chart.draw()):(chart=$.plot(elem,v,options),elem.show())})}}}),angular.module("core").factory("Account",["$resource",function($resource){return $resource("/api/public/accounts/:id",{id:"@id"})}]),angular.module("core").factory("Company",["$resource",function($resource){return $resource("/api/public/companies/:id",{id:"@id"})}]),angular.module("core").factory("Project",["$resource",function($resource){return $resource("/api/public/projects/:id",{id:"@id"},{active:{method:"GET",url:"/api/public/projects/active",isArray:!0},hide:{method:"POST",url:"/api/public/projects/:id/hide",isArray:!1},unhide:{method:"POST",url:"/api/public/projects/:id/unhide",isArray:!1},changetasks:{method:"POST",url:"/api/public/projects/:id/changetasks",isArray:!1}})}]),angular.module("core").factory("TimeRegistration",["$resource",function($resource){return $resource("/api/public/timeregistrations/:id",{id:"@id"},{bydate:{method:"GET",url:"/api/public/timeregistrations/bydate/:date",params:{date:"@date"},isArray:!0},byrange:{method:"GET",url:"/api/public/timeregistrations/byrange/:from/:to",params:{from:"@from",to:"@to"},isArray:!0},getinfo:{method:"GET",url:"/api/public/timeregistrations/getinfo/:from/:to",params:{from:"@from",to:"@to"}}})}]),angular.module("core").factory("XLSXReader",["$q","$rootScope",function($q){function convertWorkbook(workbook){var sheets={};return _.forEachRight(workbook.SheetNames,function(sheetName){var sheet=workbook.Sheets[sheetName];sheets[sheetName]=convertSheet(sheet)}),sheets}function convertSheet(sheet){var range=XLSX.utils.decode_range(sheet["!ref"]),sheetData=[],header=[];return _.forEachRight(_.range(range.s.r,range.e.r+1),function(row){var rowData=[];_.forEachRight(_.range(range.s.c,range.e.c+1),function(column){var cellIndex=XLSX.utils.encode_cell({c:column,r:row}),cell=sheet[cellIndex];rowData[column]=cell?cell.v:void 0}),0==row?header=rowData:sheetData[row-1]=rowData}),{header:header,data:sheetData,name:sheet.name,col_size:range.e.c+1,row_size:range.e.r}}var service=function(data){angular.extend(this,data)};return service.readFile=function(file){var deferred=$q.defer(),reader=new FileReader;return reader.onload=function(e){var data=e.target.result,workbook=XLSX.read(data,{type:"binary"});deferred.resolve(convertWorkbook(workbook))},reader.readAsBinaryString(file),deferred.promise},service}]),angular.module("core").filter("formatdate",function(){return function(a){return _.has(a,"year")&&_.has(a,"month")&&_.has(a,"day")?a.year+"-"+("00"+a.month).slice(-2)+"-"+("00"+a.day).slice(-2):"-"}}),angular.module("core").filter("formattime",function(){return function(a){if(_.has(a,"hour")&&_.has(a,"minutes"))return("00"+a.hour).slice(-2)+":"+("00"+a.minutes).slice(-2);if(_.isNumber(a)){var hour=Math.floor(a/60),minutes=Math.floor(a-60*hour);return hour>99?hour+":"+("00"+minutes).slice(-2):("00"+hour).slice(-2)+":"+("00"+minutes).slice(-2)}return"-"}}),angular.module("core").filter("moment",function(){return function(date,format){return date.format(format)}}),angular.module("core").service("Menus",[function(){this.defaultRoles=["user"],this.menus={};var shouldRender=function(user){if(!user)return this.isPublic;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exists")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,isPublic,roles){return this.menus[menuId]={isPublic:isPublic||!1,roles:roles||this.defaultRoles,items:[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,menuItemTitle,menuItemURL,menuItemType,menuItemUIRoute,isPublic,roles){return this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:menuItemTitle,link:menuItemURL,menuItemType:menuItemType||"item",menuItemClass:menuItemType,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:isPublic||this.menus[menuId].isPublic,roles:roles||this.defaultRoles,items:[],shouldRender:shouldRender}),this.menus[menuId]},this.addSubMenuItem=function(menuId,rootMenuItemURL,menuItemTitle,menuItemURL,menuItemUIRoute,isPublic,roles){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===rootMenuItemURL&&this.menus[menuId].items[itemIndex].items.push({title:menuItemTitle,link:menuItemURL,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:isPublic||this.menus[menuId].isPublic,roles:roles||this.defaultRoles,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===menuItemURL&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].link===submenuItemURL&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar")}]),angular.module("crm").config(["$stateProvider",function($stateProvider){$stateProvider.state("crm",{templateUrl:"modules/crm/views/crm.html",access:{requiredLogin:!0}}).state("crm.companies",{url:"/companies",templateUrl:"modules/crm/views/companies.html",access:{requiredLogin:!0}})}]),angular.module("crm").controller("CompaniesController",["$scope","$modal","Company",function($scope,$modal,Company){$scope.getAllCompanies=function(){$scope.companies=Company.query()},$scope.openCompany=function(company){var createDialog=$modal.open({templateUrl:"/modules/crm/views/companydialog.html",controller:"CompanyDialogController",resolve:{toUpdate:function(){return company}}});createDialog.result.then(function(company){var c=_.find($scope.companies,{id:company.id});c?angular.copy(company,c):$scope.companies.push(company)})}}]),angular.module("crm").controller("CompanyDialogController",["$scope","Company","toUpdate",function($scope,Company,toUpdate){function showMessage(message){$scope.isBusy=!0,$scope.message=message}function hideMessage(){$scope.isBusy=!1,$scope.message=""}$scope.originalCompany=toUpdate,$scope.newCompany=void 0==toUpdate,toUpdate=toUpdate||{},$scope.company={name:toUpdate.name||""},$scope.isBusy=!1,$scope.message="",$scope.ok=function(){showMessage("Saving company...");var id=$scope.newCompany?{}:{id:$scope.originalCompany.id};Company.save(id,$scope.company,function(data){hideMessage(),$scope.$close(data)},function(){showMessage("An error occurred...")})},$scope.cancel=function(){$scope.$dismiss("cancel")}}]),angular.module("project").config(["$stateProvider",function($stateProvider){$stateProvider.state("project",{templateUrl:"modules/project/views/project.html",access:{requiredLogin:!0}}).state("project.projects",{url:"/projects",templateUrl:"modules/project/views/projects.html",access:{requiredLogin:!0}})}]),angular.module("project").controller("ProjectDialogController",["$scope","Project","Company","toUpdate",function($scope,Project,Company,toUpdate){function showMessage(message){$scope.isBusy=!0,$scope.message=message}function hideMessage(){$scope.isBusy=!1,$scope.message=""}$scope.originalProject=toUpdate,$scope.newProject=void 0==toUpdate,toUpdate=toUpdate||{},$scope.project={companyId:toUpdate.companyId||"",name:toUpdate.name||"",description:toUpdate.description||""},$scope.isBusy=!1,$scope.message="",$scope.companies=Company.query(),$scope.ok=function(){showMessage("Saving project...");var id=$scope.newProject?{}:{id:$scope.originalProject.id};Project.save(id,$scope.project,function(data){hideMessage(),$scope.$close(data)},function(){showMessage("An error occurred...")})},$scope.cancel=function(){$scope.$dismiss("cancel")}}]),angular.module("project").controller("ProjectsController",["$scope","$modal","Project",function($scope,$modal,Project){$scope.getAllProjects=function(){$scope.projects=Project.query()},$scope.openProject=function(project){var createDialog=$modal.open({templateUrl:"/modules/project/views/projectdialog.html",controller:"ProjectDialogController",resolve:{toUpdate:function(){return project}}});createDialog.result.then(function(project){var p=_.find($scope.projects,{id:project.id});p?angular.copy(project,p):$scope.projects.push(project)})},$scope.openProjectTasks=function(project){var createDialog=$modal.open({templateUrl:"/modules/project/views/projecttasksdialog.html",controller:"ProjectTasksDialogController",resolve:{toUpdate:function(){return project}}});createDialog.result.then(function(project){var p=_.find($scope.projects,{id:project.id});p&&angular.copy(project,p)})},$scope.hideProject=function(project){Project.hide({id:project.id},function(){project.hidden=!0})},$scope.unhideProject=function(project){Project.unhide({id:project.id},function(){project.hidden=!1})}}]),angular.module("project").controller("ProjectTasksDialogController",["$scope","Project","toUpdate",function($scope,Project,toUpdate){function showMessage(message){$scope.isBusy=!0,$scope.message=message}function hideMessage(){$scope.isBusy=!1,$scope.message=""}$scope.originalProject=toUpdate,toUpdate=toUpdate||{},$scope.project={tasks:_.map(toUpdate.tasks,function(t){return{name:t.name,defaultRateInCents:t.defaultRateInCents}})},$scope.isBusy=!1,$scope.message="",$scope.ok=function(){showMessage("Saving project..."),Project.changetasks({id:$scope.originalProject.id},$scope.project.tasks,function(data){hideMessage(),$scope.$close(data)},function(){showMessage("An error occurred...")})},$scope.cancel=function(){$scope.$dismiss("cancel")}}]),angular.module("time").config(["$stateProvider","$urlRouterProvider",function($stateProvider){$stateProvider.state("time",{templateUrl:"modules/time/views/time.html",access:{requiredLogin:!0}}).state("time.overview",{url:"/time/overview/:from/:to",templateUrl:"modules/time/views/overview.html",access:{requiredLogin:!0}}).state("time.registrations",{url:"/time/registrations/:date",templateUrl:"modules/time/views/registrations.html",access:{requiredLogin:!0}}).state("time.report",{url:"/time/report/:from/:to",templateUrl:"modules/time/views/report.html",access:{requiredLogin:!0}}).state("time.import",{url:"/time/import",templateUrl:"modules/time/views/import.html",access:{requiredLogin:!0}})}]),angular.module("time").controller("ImportController",["$scope","XLSXReader","Project","TimeRegistration",function($scope,XLSXReader,Project,TimeRegistration){function convertDisplayDateToNumeric(date){return parseInt(date.replace(/-/g,""),10)}function convertDisplayTimeToNumeric(time){return parseInt(time.replace(":",""),10)}$scope.wizardStep=1,Project.active(function(projects){var tasks=[],id=0;_.forEach(projects,function(p){_.forEach(p.tasks,function(t){tasks.push({project:p,task:t,display:p.name+" - "+t.name,id:id++})})}),$scope.tasks=tasks}),$scope.fileChanged=function(files){$scope.excelSheets=[],$scope.excelFile=files[0],XLSXReader.readFile($scope.excelFile,$scope.showPreview).then(function(xlsxData){$scope.excelSheets=xlsxData,$scope.gotoStep2()})},$scope.gotoStep2=function(){$scope.wizardStep+=1},$scope.canGotoStep2=function(){return!0},$scope.selectedSheetName=void 0,$scope.selectedSheet=void 0,$scope.gotoStep3=function(){$scope.selectedSheet=$scope.excelSheets[$scope.selectedSheetName];for(var selectedSheetHeader=[],i=0;i<$scope.selectedSheet.header.length;i++)selectedSheetHeader.push({key:i,value:$scope.selectedSheet.header[i]});$scope.selectedSheetHeader=selectedSheetHeader,$scope.wizardStep+=1},$scope.canGotoStep3=function(){return null!=$scope.selectedSheetName},$scope.gotoStep4=function(){$scope.groupedRows=_.groupBy($scope.selectedSheet.data,function(r){return r[$scope.selectedProjectColumn]+" - "+r[$scope.selectedTaskColumn]}),$scope.projectsInExcelSheet=_.map($scope.groupedRows,function(g){return{project:g[0][$scope.selectedProjectColumn],task:g[0][$scope.selectedTaskColumn],display:g[0][$scope.selectedProjectColumn]+" - "+g[0][$scope.selectedTaskColumn]}}),$scope.wizardStep+=1},$scope.canGotoStep4=function(){return null!=$scope.selectedProjectColumn&&null!=$scope.selectedTaskColumn&&null!=$scope.selectedDateColumn&&null!=$scope.selectedFromColumn&&null!=$scope.selectedToColumn&&null!=$scope.selectedDescriptionColumn},$scope.gotoStep5=function(){$scope.wizardStep+=1},$scope.canGotoStep5=function(){return _.every($scope.projectsInExcelSheet,function(p){return null!=p.mappedProjectAndTask})},$scope.import=function(){var registrations=[];_.forEach($scope.groupedRows,function(groupedRow){var selectedProjectTask=_.first(_.where($scope.projectsInExcelSheet,function(p){return p.project==groupedRow[0][$scope.selectedProjectColumn]&&p.task==groupedRow[0][$scope.selectedTaskColumn]})).mappedProjectAndTask,project=$scope.tasks[selectedProjectTask].project,task=$scope.tasks[selectedProjectTask].task;_.forEach(groupedRow,function(row){registrations.push({companyId:project.companyId,projectId:project.id,task:task.name,description:row[$scope.selectedDescriptionColumn],date:convertDisplayDateToNumeric(row[$scope.selectedDateColumn]),from:convertDisplayTimeToNumeric(row[$scope.selectedFromColumn]),to:convertDisplayTimeToNumeric(row[$scope.selectedToColumn])})})}),TimeRegistration.save(registrations,function(){},function(){})}}]),angular.module("time").controller("OverviewController",["$scope","$location","$stateParams","TimeRegistration",function($scope,$location,$stateParams,TimeRegistration){$scope.from=new moment($stateParams.from,"YYYYMMDD"),$scope.to=new moment($stateParams.to,"YYYYMMDD"),$scope.hasTimeRegistrations=!1,$scope.from=new moment($stateParams.from,"YYYYMMDD"),$scope.to=new moment($stateParams.to,"YYYYMMDD"),$scope.thisWeek=(new moment).day(1).format("YYYYMMDD")+"/"+(new moment).day(7).format("YYYYMMDD"),$scope.lastWeek=(new moment).day(1).subtract("days",7).format("YYYYMMDD")+"/"+(new moment).day(7).subtract("days",7).format("YYYYMMDD"),$scope.thisMonth=(new moment).set("date",1).format("YYYYMMDD")+"/"+(new moment).set("date",(new moment).daysInMonth()).format("YYYYMMDD"),$scope.lastMonth=(new moment).set("date",1).subtract("months",1).format("YYYYMMDD")+"/"+(new moment).subtract("months",1).set("date",(new moment).subtract("months",1).daysInMonth()).format("YYYYMMDD"),$scope.thisYear=(new moment).set("month",0).set("date",1).format("YYYYMMDD")+"/"+(new moment).set("month",11).set("date",31).format("YYYYMMDD"),$scope.lastYear=(new moment).set("month",0).set("date",1).subtract("years",1).format("YYYYMMDD")+"/"+(new moment).set("month",11).set("date",31).subtract("years",1).format("YYYYMMDD"),$scope.$watch("from",function(){$scope.displayFrom=$scope.from.format("YYYY-MM-DD")}),$scope.$watch("to",function(){$scope.displayTo=$scope.to.format("YYYY-MM-DD")}),$scope.changeFrom=function(date,format){$scope.from=new moment(date,format)},$scope.changeTo=function(date,format){$scope.to=new moment(date,format)},$scope.applyDate=function(){$location.path("/time/overview/"+$scope.from.format("YYYYMMDD")+"/"+$scope.to.format("YYYYMMDD")).replace()},$scope.refresh=function(){TimeRegistration.byrange({from:$scope.from.format("YYYYMMDD"),to:$scope.to.format("YYYYMMDD")},function(tr){var grouped=_.groupBy(tr,function(i){return i.date.numeric});$scope.timeRegistrations=_.sortBy(_.map(grouped,function(g){return{date:_.first(g).date,items:g}}),function(i){return i.date.numeric}),$scope.hasTimeRegistrations=$scope.timeRegistrations.length>0})}}]),angular.module("time").controller("RegistrationsController",["$scope","$modal","$location","$stateParams","TimeRegistration",function($scope,$modal,$location,$stateParams,TimeRegistration){$scope.date=new moment($stateParams.date,"YYYYMMDD"),$scope.hasTimeRegistrations=!1,$scope.$watch("date",function(){$scope.displayDate=$scope.date.format("YYYY-MM-DD")}),$scope.nextDate=function(){$scope.date=new moment($scope.date.add(1,"days")),$location.path("/time/registrations/"+$scope.date.format("YYYYMMDD")).replace(),$scope.refresh()},$scope.previousDate=function(){$scope.date=new moment($scope.date.subtract(1,"days")),$location.path("/time/registrations/"+$scope.date.format("YYYYMMDD")).replace(),$scope.refresh()},$scope.changeDate=function(date,format){$scope.date=new moment(date,format),$location.path("/time/registrations/"+$scope.date.format("YYYYMMDD")).replace(),$scope.refresh()},$scope.refresh=function(){TimeRegistration.bydate({date:$scope.date.format("YYYYMMDD")},function(timeRegistrations){$scope.hasTimeRegistrations=timeRegistrations.length>0,$scope.timeRegistrations=_.sortBy(timeRegistrations,function(i){return i.from.numeric})})},$scope.openTimeRegistration=function(timeRegistration){var createDialog=$modal.open({templateUrl:"/modules/time/views/timeregistrationdialog.html",controller:"TimeRegistrationDialogController",size:"lg",resolve:{toUpdate:function(){return timeRegistration},date:function(){return $scope.date.format("YYYYMMDD")}}});createDialog.result.then(function(timeRegistration){var c=_.find($scope.timeRegistrations,{id:timeRegistration.id});c?angular.copy(timeRegistration,c):$scope.timeRegistrations.push(timeRegistration),$scope.hasTimeRegistrations=$scope.timeRegistrations.length>0})}}]),angular.module("time").controller("ReportController",["$scope","$location","$stateParams","TimeRegistration",function($scope,$location,$stateParams,TimeRegistration){if($scope.from=new moment($stateParams.from,"YYYYMMDD"),$scope.to=new moment($stateParams.to,"YYYYMMDD"),1==$scope.from.date()&&0==$scope.from.month()&&31==$scope.to.date()&&11==$scope.to.month()&&$scope.from.year()==$scope.to.year())$scope.title=$scope.from.format("YYYY"),$scope.previousFrom=new moment($scope.from).subtract(1,"year"),$scope.previousTo=new moment($scope.to).subtract(1,"year"),$scope.nextFrom=new moment($scope.from).add(1,"year"),$scope.nextTo=new moment($scope.to).add(1,"year");else if(1==$scope.from.date()&&new moment($scope.from).endOf("month").date()==$scope.to.date()&&$scope.from.month()==$scope.to.month()&&$scope.from.year()==$scope.to.year())$scope.title=$scope.from.format("MMMM YYYY"),$scope.previousFrom=new moment($scope.from).subtract(1,"month").startOf("month"),$scope.previousTo=new moment($scope.from).subtract(1,"month").endOf("month"),$scope.nextFrom=new moment($scope.from).add(1,"month").startOf("month"),$scope.nextTo=new moment($scope.from).add(1,"month").endOf("month");else{$scope.title=$scope.from.format("YYYY-MM-DD")+" - "+$scope.to.format("YYYY-MM-DD");var days=$scope.to.diff($scope.from,"days")+1;$scope.previousFrom=new moment($scope.from).subtract(days,"days"),$scope.previousTo=new moment($scope.to).subtract(days,"days"),$scope.nextFrom=new moment($scope.from).add(days,"days"),$scope.nextTo=new moment($scope.to).add(days,"days")}$scope.weekStart=(new moment).startOf("isoWeek").format("YYYYMMDD"),$scope.weekEnd=(new moment).endOf("isoWeek").format("YYYYMMDD"),$scope.monthStart=(new moment).startOf("month").format("YYYYMMDD"),$scope.monthEnd=(new moment).endOf("month").format("YYYYMMDD"),$scope.yearStart=(new moment).startOf("year").format("YYYYMMDD"),$scope.yearEnd=(new moment).endOf("year").format("YYYYMMDD"),$scope.previous=function(){$location.path("/time/report/"+$scope.previousFrom.format("YYYYMMDD")+"/"+$scope.previousTo.format("YYYYMMDD")).replace()},$scope.next=function(){$location.path("/time/report/"+$scope.nextFrom.format("YYYYMMDD")+"/"+$scope.nextTo.format("YYYYMMDD")).replace()},$scope.refresh=function(){$scope.loading=!0,TimeRegistration.getinfo({from:$scope.from.format("YYYYMMDD"),to:$scope.to.format("YYYYMMDD")}).$promise.then(function(b){$scope.summary=b.summary;var grouped=_.groupBy(b.perTask,function(i){return JSON.stringify({c:i.companyId,p:i.projectId})});$scope.infoPerProject=_.map(grouped,function(g){return{companyId:g[0].companyId,company:g[0].company,projectId:g[0].projectId,project:g[0].project,tasks:g}})}).finally(function(){$scope.billableUnbillableGraph=[{label:"Billable",data:$scope.summary.billableMinutes,color:"#7266BA"},{label:"Unbillable",data:$scope.summary.unBillableMinutes,color:"#5D9CEC"}],$scope.hasHours=$scope.summary.unBillableMinutes||$scope.summary.billableMinutes?!0:!1,$scope.loading=!1})}}]),angular.module("time").controller("TimeController",["$scope","$location","$stateParams",function($scope){$scope.today=new moment,$scope.firstOfCurrentMonth=(new moment).startOf("month"),$scope.lastOfCurrentMonth=(new moment).endOf("month")}]),angular.module("time").controller("TimeRegistrationDialogController",["$scope","Project","TimeRegistration","toUpdate","date",function($scope,Project,TimeRegistration,toUpdate,date){function showMessage(message){$scope.isBusy=!0,$scope.message=message}function hideMessage(){$scope.isBusy=!1,$scope.message=""}function convertNumericTimeToDisplay(time){var hour=Math.floor(time/100),minutes=Math.floor(time-100*hour);return("00"+hour).slice(-2)+":"+("00"+minutes).slice(-2)}function convertDisplayTimeToNumeric(time){return parseInt(time.replace(":",""),10)}$scope.originalTimeRegistration=toUpdate,$scope.newTimeRegistration=void 0==toUpdate,toUpdate=toUpdate||{},$scope.timeRegistration={company:null,project:null,task:null,billable:toUpdate.billable||!1,description:toUpdate.description||"",from:toUpdate.from?convertNumericTimeToDisplay(toUpdate.from.numeric):"",to:toUpdate.to?convertNumericTimeToDisplay(toUpdate.to.numeric):""},$scope.$watch("timeRegistration.company",function(newv,oldv){oldv&&newv&&oldv.id!=newv.id&&($scope.timeRegistration.project=null,$scope.timeRegistration.task=null)}),$scope.$watch("timeRegistration.project",function(newv,oldv){oldv&&newv&&oldv.id!=newv.id&&($scope.timeRegistration.task=null)}),$scope.$watch("timeRegistration.task",function(){$scope.newTimeRegistration&&$scope.timeRegistration.task&&($scope.timeRegistration.billable=$scope.timeRegistration.task.defaultRateInCents>0)}),$scope.isBusy=!1,$scope.message="",$scope.projects=Project.active(function(){$scope.companies=_.map(_.groupBy($scope.projects,function(p){return p.companyId}),function(g){return{id:g[0].companyId,name:g[0].company.name,projects:g}}),toUpdate.companyId&&($scope.timeRegistration.company=_.first(_.where($scope.companies,{id:toUpdate.companyId}))),toUpdate.projectId&&$scope.timeRegistration.company&&($scope.timeRegistration.project=_.first(_.where($scope.timeRegistration.company.projects,{id:toUpdate.projectId}))),toUpdate.task&&$scope.timeRegistration.project&&($scope.timeRegistration.task=_.first(_.where($scope.timeRegistration.project.tasks,{name:toUpdate.task}))),$scope.$apply()}),$scope.ok=function(){showMessage("Saving time registration...");var id=$scope.newTimeRegistration?{}:{id:$scope.originalTimeRegistration.id};TimeRegistration.save(id,{companyId:$scope.timeRegistration.company.id,projectId:$scope.timeRegistration.project.id,task:$scope.timeRegistration.task.name,description:$scope.timeRegistration.description,billable:$scope.timeRegistration.billable,date:date,from:convertDisplayTimeToNumeric($scope.timeRegistration.from),to:convertDisplayTimeToNumeric($scope.timeRegistration.to)},function(data){hideMessage(),$scope.$close(data)},function(){showMessage("An error occurred...")})},$scope.cancel=function(){$scope.$dismiss("cancel")}}]);